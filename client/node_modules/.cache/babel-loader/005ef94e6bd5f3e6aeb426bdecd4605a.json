{"ast":null,"code":"import _classCallCheck from \"/home/jappe/devpot/workspace/school/react-pwa/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jappe/devpot/workspace/school/react-pwa/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables.config';\nimport history from '../history';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.scheduleRenewal();\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n\n          history.replace('/');\n        } else if (err) {\n          history.replace('/');\n          console.log(err); // alert(`Error: ${err.error}. Check the console for further details.`);\n        }\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set the time that the access token will expire at\n      var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt); // schedule a token renewal\n\n      this.scheduleRenewal(); // navigate to the home route\n\n      history.replace('/');\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      var accessToken = localStorage.getItem('access_token');\n\n      if (!accessToken) {\n        throw new Error('No access token found');\n      }\n\n      return accessToken;\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile(cb) {\n      var _this2 = this;\n\n      var accessToken = this.getAccessToken();\n      this.auth0.client.userInfo(accessToken, function (err, profile) {\n        if (profile) {\n          _this2.userProfile = profile;\n        }\n\n        cb(err, profile);\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear access token and ID token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n      localStorage.removeItem('scopes');\n      this.userProfile = null;\n      clearTimeout(this.tokenRenewalTimeout); // navigate to the home route\n\n      history.replace('/');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      return new Date().getTime() < expiresAt;\n    }\n  }, {\n    key: \"renewToken\",\n    value: function renewToken() {\n      var _this3 = this;\n\n      this.auth0.checkSession({}, function (err, result) {\n        if (err) {// alert(\n          //   `Could not get a new token (${err.error}: ${err.error_description}).`\n          // );\n        } else {\n          _this3.setSession(result); // alert(`Successfully renewed auth!`);\n\n        }\n      });\n    }\n  }, {\n    key: \"scheduleRenewal\",\n    value: function scheduleRenewal() {\n      var _this4 = this;\n\n      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      var delay = expiresAt - Date.now();\n\n      if (delay > 0) {\n        this.tokenRenewalTimeout = setTimeout(function () {\n          _this4.renewToken();\n        }, delay);\n      }\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/home/jappe/devpot/workspace/school/react-pwa/client/src/Auth/index.js"],"names":["auth0","AUTH_CONFIG","history","Auth","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getProfile","scheduleRenewal","authorize","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","getItem","Error","cb","client","userInfo","profile","userProfile","removeItem","clearTimeout","tokenRenewalTimeout","parse","checkSession","result","delay","now","setTimeout","renewToken"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACEC,WADF,QAEO,0BAFP;AAGA,OAAOC,OAAP,MAAoB,YAApB;;IAEqBC,I;;;AAYnB,kBAAc;AAAA;;AAAA,SARdH,KAQc,GARN,IAAIA,KAAK,CAACI,OAAV,CAAkB;AACxBC,MAAAA,MAAM,EAAEJ,WAAW,CAACI,MADI;AAExBC,MAAAA,QAAQ,EAAEL,WAAW,CAACM,QAFE;AAGxBC,MAAAA,WAAW,EAAEP,WAAW,CAACQ,WAHD;AAIxBC,MAAAA,YAAY,EAAE,gBAJU;AAKxBC,MAAAA,KAAK,EAAE;AALiB,KAAlB,CAQM;AACZ,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKI,cAAL,GAAsB,KAAKA,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKK,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKM,eAAL;AACD;;;;4BAEO;AACN,WAAKnB,KAAL,CAAWoB,SAAX;AACD;;;2CAEsB;AAAA;;AACrB,WAAKpB,KAAL,CAAWqB,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACxC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,UAAA,KAAI,CAACC,UAAL,CAAgBH,UAAhB;;AACArB,UAAAA,OAAO,CAACyB,OAAR,CAAgB,GAAhB;AACD,SAHD,MAGO,IAAIL,GAAJ,EAAS;AACdpB,UAAAA,OAAO,CAACyB,OAAR,CAAgB,GAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ,EAFc,CAGd;AACD;AACF,OATD;AAUD;;;+BAEUC,U,EAAY;AACrB;AACA,UAAIO,SAAS,GAAGC,IAAI,CAACC,SAAL,CACdT,UAAU,CAACU,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EADhB,CAAhB;AAIAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCd,UAAU,CAACC,WAAhD;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCd,UAAU,CAACE,OAA5C;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC,EARqB,CAUrB;;AACA,WAAKX,eAAL,GAXqB,CAarB;;AACAjB,MAAAA,OAAO,CAACyB,OAAR,CAAgB,GAAhB;AACD;;;qCAEgB;AACf,UAAMH,WAAW,GAAGY,YAAY,CAACE,OAAb,CAAqB,cAArB,CAApB;;AACA,UAAI,CAACd,WAAL,EAAkB;AAChB,cAAM,IAAIe,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,aAAOf,WAAP;AACD;;;+BAEUgB,E,EAAI;AAAA;;AACb,UAAIhB,WAAW,GAAG,KAAKP,cAAL,EAAlB;AACA,WAAKjB,KAAL,CAAWyC,MAAX,CAAkBC,QAAlB,CAA2BlB,WAA3B,EAAwC,UAACF,GAAD,EAAMqB,OAAN,EAAkB;AACxD,YAAIA,OAAJ,EAAa;AACX,UAAA,MAAI,CAACC,WAAL,GAAmBD,OAAnB;AACD;;AACDH,QAAAA,EAAE,CAAClB,GAAD,EAAMqB,OAAN,CAAF;AACD,OALD;AAMD;;;6BAEQ;AACP;AACAP,MAAAA,YAAY,CAACS,UAAb,CAAwB,cAAxB;AACAT,MAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAT,MAAAA,YAAY,CAACS,UAAb,CAAwB,YAAxB;AACAT,MAAAA,YAAY,CAACS,UAAb,CAAwB,QAAxB;AACA,WAAKD,WAAL,GAAmB,IAAnB;AACAE,MAAAA,YAAY,CAAC,KAAKC,mBAAN,CAAZ,CAPO,CAQP;;AACA7C,MAAAA,OAAO,CAACyB,OAAR,CAAgB,GAAhB;AACD;;;sCAEiB;AAChB;AACA;AACA,UAAIG,SAAS,GAAGC,IAAI,CAACiB,KAAL,CAAWZ,YAAY,CAACE,OAAb,CAAqB,YAArB,CAAX,CAAhB;AACA,aAAO,IAAIJ,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACD;;;iCAEY;AAAA;;AACX,WAAK9B,KAAL,CAAWiD,YAAX,CAAwB,EAAxB,EACE,UAAC3B,GAAD,EAAM4B,MAAN,EAAiB;AACf,YAAI5B,GAAJ,EAAS,CACP;AACA;AACA;AACD,SAJD,MAIO;AACL,UAAA,MAAI,CAACI,UAAL,CAAgBwB,MAAhB,EADK,CAEL;;AACD;AACF,OAVH;AAYD;;;sCAEiB;AAAA;;AAChB,UAAMpB,SAAS,GAAGC,IAAI,CAACiB,KAAL,CAAWZ,YAAY,CAACE,OAAb,CAAqB,YAArB,CAAX,CAAlB;AACA,UAAMa,KAAK,GAAGrB,SAAS,GAAGI,IAAI,CAACkB,GAAL,EAA1B;;AACA,UAAID,KAAK,GAAG,CAAZ,EAAe;AACb,aAAKJ,mBAAL,GAA2BM,UAAU,CAAC,YAAM;AAC1C,UAAA,MAAI,CAACC,UAAL;AACD,SAFoC,EAElCH,KAFkC,CAArC;AAGD;AACF;;;;;;SApHkBhD,I","sourcesContent":["import auth0 from 'auth0-js';\nimport {\n  AUTH_CONFIG\n} from './auth0-variables.config';\nimport history from '../history';\n\nexport default class Auth {\n  userProfile;\n  tokenRenewalTimeout;\n\n  auth0 = new auth0.WebAuth({\n    domain: AUTH_CONFIG.domain,\n    clientID: AUTH_CONFIG.clientId,\n    redirectUri: AUTH_CONFIG.callbackUrl,\n    responseType: 'token id_token',\n    scope: 'openid profile'\n  });\n\n  constructor() {\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.scheduleRenewal();\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n        history.replace('/');\n      } else if (err) {\n        history.replace('/');\n        console.log(err);\n        // alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n\n  setSession(authResult) {\n    // Set the time that the access token will expire at\n    let expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 + new Date().getTime()\n    );\n\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n\n    // schedule a token renewal\n    this.scheduleRenewal();\n\n    // navigate to the home route\n    history.replace('/');\n  }\n\n  getAccessToken() {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      throw new Error('No access token found');\n    }\n    return accessToken;\n  }\n\n  getProfile(cb) {\n    let accessToken = this.getAccessToken();\n    this.auth0.client.userInfo(accessToken, (err, profile) => {\n      if (profile) {\n        this.userProfile = profile;\n      }\n      cb(err, profile);\n    });\n  }\n\n  logout() {\n    // Clear access token and ID token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    localStorage.removeItem('scopes');\n    this.userProfile = null;\n    clearTimeout(this.tokenRenewalTimeout);\n    // navigate to the home route\n    history.replace('/');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    return new Date().getTime() < expiresAt;\n  }\n\n  renewToken() {\n    this.auth0.checkSession({},\n      (err, result) => {\n        if (err) {\n          // alert(\n          //   `Could not get a new token (${err.error}: ${err.error_description}).`\n          // );\n        } else {\n          this.setSession(result);\n          // alert(`Successfully renewed auth!`);\n        }\n      }\n    );\n  }\n\n  scheduleRenewal() {\n    const expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    const delay = expiresAt - Date.now();\n    if (delay > 0) {\n      this.tokenRenewalTimeout = setTimeout(() => {\n        this.renewToken();\n      }, delay);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}